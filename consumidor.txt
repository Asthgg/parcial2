#ifndef __SIMPLESEMAPHORE_H_
#include <SimpleSemaphore.h>
#define __SIMPLESEMAPHORE_H_
#endif

#ifndef __SHAREDMEMORY_H_
#include <SharedMemory.h>
#define __SHAREDMEMORY_H_
#endif

#ifndef __IOSTREAM__
#include <iostream>
#define __IOSTREAM__
#endif

#ifndef __UNISTD_H_
#include <unistd.h>
#define __UNISTD_H_
#endif

using std::cout;
using std::cerr;
using std::endl;

const int tamCola = 1;
typedef int cola_t[tamCola];

int main() {
    SimpleSemaphore semPC("/semPC",0);
    SimpleSemaphore semCP("/semCP",1);
    SimpleSemaphore semBuffer("/semBuffer");
    SharedMemory<cola_t> buffer("/buffer");
    SharedMemory<int> cola("/cola");

    cola_t &c = buffer();
    int &i = cola();

    int pid = getpid();
    int dato = -1;
    int pos = -1;
    for (int cont = 0; cont <10; cont++) {
        cerr << "Consumidor " << pid  << ": Esperando que termine el productor" << endl;
        cerr.flush();
        semPC.Wait(); //Si hay productores
        cerr << "Consumidor " << pid  << ": Recibiendo dato" << endl;
        cerr.flush();
        semBuffer.Wait(); //puedo entrar al buffer
        pos = i;
        dato = c[i];
        i = (i+1)%tamCola;
        semBuffer.Signal(); //libera buffer
        semCP.Signal();  //
        sleep(2);
        cout << "Consumidor " << pid  << ": El valor recibido en " << pos << " es " << dato << endl;
        cout.flush();
    }
    return 0;
}