#ifndef __SIMPLESEMAPHORE_H_
#include <SimpleSemaphore.h>
#define __SIMPLESEMAPHORE_H_
#endif

#ifndef __SHAREDMEMORY_H_
#include <SharedMemory.h>
#define __SHAREDMEMORY_H_
#endif

#ifndef __IOSTREAM__
#include <iostream>
#define __IOSTREAM__
#endif

#ifndef __SYS_TYPES_H_
#include <sys/types.h>
#define __SYS_TYPES_H_
#endif

#ifndef __UNISTD_H_
#include <unistd.h>
#define __UNISTD_H_
#endif

using std::cout;
using std::cerr;
using std::endl;

const int tamCola = 1;
typedef int cola_t[tamCola];

int main() {
    SimpleSemaphore semPC("/semPC",0);
    SimpleSemaphore semCP("/semCP",1);
    SimpleSemaphore semBuffer("/semCola");
    SharedMemory<cola_t> buffer("/buffer");
    SharedMemory<int> cola("/cola");

    cola_t &c = buffer();
    int &i = cola();

    int pid = getpid();  //generar identificacion
    for (int cont = 0; cont <10; cont++) {
        int pos = -1;
        cerr << "Productor " << pid <<": Esperando por buffer" << endl;
        cerr.flush();
        semCP.Wait();   //consumidores en esperando
        semBuffer.Wait();  //si el buffer esta ocupado
        pos = i;
        c[i] = pid;  //poner identificacion en buffer
        i = (i+1)%tamCola;
        n++;
        semBuffer.Signal();
        sleep(3); //produce identificacion
        cout << "Productor " << pid << ": Generó en  "  << pos << " el valor " << pid << endl;
        cout.flush();
        semPC.Signal(); //le dice al consumidor que ya puede entrar en le buffer
    }
    return 0;
}